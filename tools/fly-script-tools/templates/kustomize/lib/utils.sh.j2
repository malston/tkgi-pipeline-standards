#!/usr/bin/env bash
# Utility functions for fly.sh

# Clean up any temp files generated by this script
TMP_DIR=$(mktemp -d 2>/dev/null) || {
    echo "Error: Failed to create temporary directory." >&2
    exit 1
}
trap '[[ -d "$TMP_DIR" ]] && rm -rf -- "$TMP_DIR"' EXIT

# Function to get the latest version tag
function get_latest_version() {
    git pull -q --all >/dev/null 2>&1
    if ! GIT_RELEASE_TAG=$(git describe --tags "$(git rev-list --tags --max-count=1)" 2>/dev/null); then
        echo ""
        return
    fi
    echo "${GIT_RELEASE_TAG##*release-v}"
}

# Function to check if a pipeline is paused and offer to unpause it
function pipeline_pause_check() {
    local team="$1"
    local pipeline_name="$2"
    local concourse_url="$3"

    # Check if the pipeline is paused
    local paused
    paused=$(fly -t "$team" pipelines | grep -F "$pipeline_name" | awk '{ print $2 }')

    if [[ "$paused" == "yes" ]]; then
        echo
        read -rp "Pipeline '$pipeline_name' is currently paused. Unpause? (y/n): " unpause
        echo
        if [[ "$unpause" == "y" ]]; then
            fly -t "$team" unpause-pipeline -p "$pipeline_name"
            echo "Unpaused pipeline '$pipeline_name'."
            echo
            concourse_url=$(fly ts | grep -F "$team" | head -1 | awk '{print $2}')
            echo "Check the pipeline at the following URL:"
            echo "${concourse_url}/teams/${team}/pipelines/${pipeline_name}"
        fi
    else
        concourse_url=$(fly ts | grep -F "$team" | head -1 | awk '{print $2}')
        echo "Pipeline '$pipeline_name' is already unpaused. Check the pipeline at the following URL:"
        echo "${concourse_url}/teams/${team}/pipelines/${pipeline_name}"
    fi
}

# Function to generate pipeline configuration file
function generate_pipeline_config() {
    local pipeline_file_template=$1
    local environment=$2
    local version=$3
    local enable_validation_testing=$4
    local pipeline_config_file=$TMP_DIR/pipeline.yml
    
    case $environment in
    lab)
        enable_validation_testing=true
        ;;
    nonprod)
        enable_validation_testing=false
        ;;
    prod)
        enable_validation_testing=false
        ;;
    esac
    
    cat >"$TMP_DIR/override.yml" <<EOF
#@data/values
---
#@overlay/match missing_ok=True
environment: $environment
enable_validation_testing: $enable_validation_testing
version: $version
EOF
    
    if ! ytt -f "$pipeline_file_template" \
        -f "$TMP_DIR/override.yml" \
        >"$pipeline_config_file"; then
        exit 1
    fi
    
    echo "$pipeline_config_file"
}

# Setup environment variables based on foundation and environment
function setup_environment_variables() {
    # Parse foundation components
    DC=$(echo "$FOUNDATION" | awk -F- '{print $1}')
    DCTYPE=$(echo "$FOUNDATION" | awk -F- '{print $2}')
    FOUNDATION_PATH="foundations/$FOUNDATION"

    # Process version
    if [[ -n $VERSION ]]; then
        if [[ $VERSION =~ release-v* ]]; then
            VERSION="${VERSION##*release-v}"
        elif [[ $VERSION = v* ]]; then
            VERSION="${VERSION##*v}"
        fi

        if [[ $VERSION = "latest" ]]; then
            VERSION="$(get_latest_version)"
        fi
    fi

    # Set environment if not specified
    if [ -z "$ENVIRONMENT" ]; then
        case $DC in
        cic | cml)
            ENVIRONMENT="lab"
            CONFIG_REPO_NAME=config-lab
            ;;
        temr | tmpe)
            ENVIRONMENT="nonprod"
            if [ -z "$GITHUB_ORG" ]; then
                GITHUB_ORG="Utilities-tkgiops"
            fi
            if [ -z "$CONFIG_REPO_NAME" ]; then
                CONFIG_REPO_NAME=config-nonprod
            fi
            ;;
        oxdc | svdc)
            ENVIRONMENT="prod"
            GITHUB_ORG="Utilities-tkgiops"
            CONFIG_REPO_NAME=config-prod
            ;;
        esac
    fi

    # Set environment-specific defaults
    case $ENVIRONMENT in
    lab)
        GIT_RELEASE_TAG=${GIT_RELEASE_TAG:-develop}
        ;;
    nonprod)
        GIT_RELEASE_TAG=${GIT_RELEASE_TAG:-master}
        if [ -z "$GITHUB_ORG" ]; then
            GITHUB_ORG="Utilities-tkgiops"
        fi
        if [ -z "$CONFIG_REPO_NAME" ]; then
            CONFIG_REPO_NAME=config-nonprod
        fi
        ;;
    prod)
        GIT_RELEASE_TAG=${GIT_RELEASE_TAG:-master}
        if [ -z "$GITHUB_ORG" ]; then
            GITHUB_ORG="Utilities-tkgiops"
        fi
        if [ -z "$CONFIG_REPO_NAME" ]; then
            CONFIG_REPO_NAME=config-prod
        fi
        ;;
    esac

    # Set Git URIs
    GIT_URI="git@github.com:$GITHUB_ORG/{{ pipeline_name }}.git"
    CONFIG_GIT_URI="git@github.com:$GITHUB_ORG/$CONFIG_REPO_NAME.git"
}