# ${default_pipeline}.yml - Pipeline template for ${repo_name}
# Organization: ${org_name}
# Generated from reference template

---
resource_types:
  - name: email
    type: registry-image
    source:
      repository: pcfseceng/email-resource
      tag: latest

resources:
  - name: repo
    type: git
    icon: github
    source:
      uri: git@${github_domain}:${org_name}/${repo_name}.git
      branch: ((branch))
      private_key: ((git_private_key))

  - name: timer
    type: time
    icon: clock-outline
    source:
      interval: ((timer_duration))

  - name: email
    type: email
    source:
      smtp:
        host: ((smtp_host))
        port: ((smtp_port))
        username: ((smtp_username))
        password: ((smtp_password))
      from: ((email_from))
      to: ((email_to))

jobs:
  - name: validate
    plan:
      - get: repo
        trigger: true
      - get: timer
        trigger: true
      - task: validate-code
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: golang
              tag: latest
          inputs:
            - name: repo
          run:
            path: /bin/bash
            args:
              - -c
              - |
                cd repo
                echo "Running validation for ${repo_name}"
                # Add your validation steps here
                echo "Validation complete"
        on_success:
            put: email
            params:
            subject: "Validation Successful: ${repo_name}"
            body: |
              ‚úÖ *${repo_name}* validation successful for foundation ((foundation)).
              View build details: <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME>
        on_failure:
            put: email
            params:
            subject: "Validation Failed: ${repo_name}"
            body: |
              ‚ùå *${repo_name}* validation FAILED for foundation ((foundation)).
              View build details: <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME>

  - name: deploy
    plan:
      - get: repo
        trigger: true
        passed: [validate]
      - task: deploy
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: pivotalcfreleng/tkgi-ci
              tag: latest
          inputs:
            - name: repo
          run:
            path: /bin/bash
            args:
              - -c
              - |
                cd repo
                echo "Deploying ${repo_name} to ((foundation))"
                # Add your deployment steps here
                echo "Deployment complete"
        on_success:
          put: email
          params:
            subject: "Deployment Successful: ${repo_name}"
            body: |
              üöÄ *${repo_name}* successfully deployed to ((foundation)).
              View build details: <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME>
        on_failure:
          put: email
          params:
            subject: "Deployment Failed: ${repo_name}"
            body: |
              ‚ùå *${repo_name}* deployment FAILED on ((foundation)).
              View build details: <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME>