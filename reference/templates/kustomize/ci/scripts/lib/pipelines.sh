#!/usr/bin/env bash
#
# Pipeline helper functions
# Contains utility functions related to pipeline operations
#

# Clean up any temp files generated by this script
TMP_DIR=$(mktemp -d 2>/dev/null) || {
    echo "Error: Failed to create temporary directory." >&2
    exit 1
}
trap '[[ -d "$TMP_DIR" ]] && rm -rf -- "$TMP_DIR"' EXIT

# Function to get the latest version from git tags
# @return The latest version tag without prefix, or empty string if no tags found
function get_latest_version() {
    git pull -q --all >/dev/null 2>&1
    if ! GIT_RELEASE_TAG=$(git describe --tags "$(git rev-list --tags --max-count=1)" 2>/dev/null); then
        echo ""
        return
    fi
    echo "${GIT_RELEASE_TAG##*release-v}"
}

# Function to check if a pipeline is paused and offer to unpause it
# @param team The Concourse team/target
# @param pipeline_name The pipeline name
# @param concourse_url The Concourse URL (optional)
function pipeline_pause_check() {
    local team="$1"
    local pipeline_name="$2"
    local concourse_url="$3"

    # Check if the pipeline is paused
    local paused
    paused=$(fly -t "$team" pipelines | grep -F "$pipeline_name" | awk '{ print $2 }')

    if [[ "$paused" == "yes" ]]; then
        echo
        read -rp "Pipeline '$pipeline_name' is currently paused. Unpause? (y/n): " unpause
        echo
        if [[ "$unpause" == "y" ]]; then
            fly -t "$team" unpause-pipeline -p "$pipeline_name"
            echo "Unpaused pipeline '$pipeline_name'."
            echo
            concourse_url=$(fly ts | grep -F "$team" | head -1 | awk '{print $2}')
            echo "Check the pipeline at the following URL:"
            echo "${concourse_url}/teams/${team}/pipelines/${pipeline_name}"
        fi
    else
        concourse_url=$(fly ts | grep -F "$team" | head -1 | awk '{print $2}')
        echo "Pipeline '$pipeline_name' is already unpaused. Check the pipeline at the following URL:"
        echo "${concourse_url}/teams/${team}/pipelines/${pipeline_name}"
    fi
}

# Function to generate a pipeline configuration using ytt
# @param pipeline_file_template The template pipeline file
# @param environment The environment (lab, nonprod, prod)
# @param version The pipeline version
# @param enable_validation_testing Whether to enable validation testing
# @return The path to the generated pipeline configuration file
function generate_pipeline_config() {
    local pipeline_file_template=$1
    local environment=$2
    local version=$3
    local pipeline_config_file=$TMP_DIR/pipeline.yml
    local enable_validation_testing=$4
    
    # Set default enable_validation_testing based on environment
    case $environment in
    lab)
        enable_validation_testing=true
        ;;
    nonprod)
        enable_validation_testing=false
        ;;
    prod)
        enable_validation_testing=false
        ;;
    esac
    
    # Create overlay file for ytt
    cat >"$TMP_DIR/override.yml" <<EOF
#@data/values
---
#@overlay/match missing_ok=True
environment: $environment
enable_validation_testing: $enable_validation_testing
version: $version
EOF

    # Generate pipeline config using ytt
    if ! ytt -f "$pipeline_file_template" \
        -f "$TMP_DIR/override.yml" \
        >"$pipeline_config_file"; then
        exit 1
    fi
    
    echo "$pipeline_config_file"
}